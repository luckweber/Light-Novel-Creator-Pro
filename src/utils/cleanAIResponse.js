// Sistema de Corre√ß√£o Inteligente usando IA
// Usa a pr√≥pria IA para corrigir e adaptar respostas malformadas

class AICorrectionAgent {
  constructor(aiService) {
    this.aiService = aiService;
  }

  // Prompt para corre√ß√£o de JSON malformado
  getCorrectionPrompt(originalResponse, expectedStructure) {
    return `
Voc√™ √© um especialista em corre√ß√£o de JSON. Sua tarefa √© analisar uma resposta de IA que pode estar malformada e corrigi-la para um JSON v√°lido.

RESPOSTA ORIGINAL DA IA:
${originalResponse}

ESTRUTURA ESPERADA (exemplo):
${JSON.stringify(expectedStructure, null, 2)}

INSTRU√á√ïES:
1. Analise a resposta original e identifique os problemas
2. Extraia todas as informa√ß√µes √∫teis, mesmo que malformadas
3. Reconstrua um JSON v√°lido seguindo a estrutura esperada
4. Se algum campo estiver faltando ou malformado, use informa√ß√µes do contexto para preench√™-lo
5. Mantenha o m√°ximo poss√≠vel do conte√∫do original
6. Certifique-se de que o JSON seja v√°lido e bem estruturado

RESPONDA APENAS COM O JSON CORRIGIDO, sem explica√ß√µes adicionais.
`;
  }

  // Prompt para extra√ß√£o inteligente de campos
  getExtractionPrompt(originalResponse, fieldType) {
    const fieldExamples = {
      magicSystem: {
        name: "Nome do sistema m√°gico",
        description: "Descri√ß√£o detalhada do sistema",
        rules: "Regras e mec√¢nicas do sistema",
        source: "Fonte de poder m√°gico",
        limitations: "Limita√ß√µes e custos"
      },
      government: {
        name: "Nome do governo",
        type: "Tipo de governo",
        description: "Descri√ß√£o do sistema pol√≠tico",
        leaderTitle: "T√≠tulo do l√≠der",
        laws: "Leis principais"
      },
      language: {
        name: "Nome da l√≠ngua",
        family: "Fam√≠lia lingu√≠stica",
        speakers: "Quem fala esta l√≠ngua",
        script: "Sistema de escrita",
        examples: "Exemplos de palavras"
      }
    };

    const examples = fieldExamples[fieldType] || fieldExamples.magicSystem;

    return `
Voc√™ √© um especialista em extra√ß√£o de dados. Analise a resposta malformada e extraia as informa√ß√µes relevantes.

RESPOSTA ORIGINAL:
${originalResponse}

CAMPOS ESPERADOS:
${JSON.stringify(examples, null, 2)}

TAREFA:
1. Identifique e extraia cada campo da resposta original
2. Se um campo estiver malformado, use o contexto para inferir o valor correto
3. Se um campo estiver faltando, crie um valor apropriado baseado no contexto
4. Retorne um JSON v√°lido com todos os campos preenchidos

RESPONDA APENAS COM O JSON CORRIGIDO.
`;
  }

  // Prompt para valida√ß√£o e melhoria
  getValidationPrompt(jsonObject, fieldType) {
    return `
Voc√™ √© um especialista em valida√ß√£o de dados. Analise este JSON e melhore-o se necess√°rio.

JSON ATUAL:
${JSON.stringify(jsonObject, null, 2)}

TIPO: ${fieldType}

TAREFA:
1. Verifique se todos os campos obrigat√≥rios est√£o presentes
2. Melhore a qualidade e coer√™ncia dos dados
3. Adicione detalhes que possam estar faltando
4. Mantenha a estrutura original, apenas melhore o conte√∫do
5. Certifique-se de que o JSON seja v√°lido e bem estruturado

RESPONDA APENAS COM O JSON MELHORADO.
`;
  }

  // M√©todo principal de corre√ß√£o usando IA
  async correctWithAI(originalResponse, fieldType = 'magicSystem') {
    try {
      console.log('ü§ñ Iniciando corre√ß√£o com IA...');
      
      // ESTRAT√âGIA 1: Tentativa de corre√ß√£o direta
      try {
        const correctionPrompt = this.getCorrectionPrompt(originalResponse, this.getExpectedStructure(fieldType));
        const correctedResponse = await this.aiService.generateText(correctionPrompt);
        
        if (correctedResponse && typeof correctedResponse === 'object') {
          console.log('‚úÖ Corre√ß√£o direta bem-sucedida');
          return this.addMetadata(correctedResponse);
        }
      } catch (error) {
        console.log('‚ùå Corre√ß√£o direta falhou, tentando extra√ß√£o...');
      }

      // ESTRAT√âGIA 2: Extra√ß√£o inteligente de campos
      try {
        const extractionPrompt = this.getExtractionPrompt(originalResponse, fieldType);
        const extractedResponse = await this.aiService.generateText(extractionPrompt);
        
        if (extractedResponse && typeof extractedResponse === 'object') {
          console.log('‚úÖ Extra√ß√£o bem-sucedida');
          return this.addMetadata(extractedResponse);
        }
      } catch (error) {
        console.log('‚ùå Extra√ß√£o falhou, tentando valida√ß√£o...');
      }

      // ESTRAT√âGIA 3: Valida√ß√£o e melhoria de objeto parcial
      try {
        const partialObject = this.extractPartialObject(originalResponse);
        if (partialObject && Object.keys(partialObject).length > 0) {
          const validationPrompt = this.getValidationPrompt(partialObject, fieldType);
          const validatedResponse = await this.aiService.generateText(validationPrompt);
          
          if (validatedResponse && typeof validatedResponse === 'object') {
            console.log('‚úÖ Valida√ß√£o bem-sucedida');
            return this.addMetadata(validatedResponse);
          }
        }
      } catch (error) {
        console.log('‚ùå Valida√ß√£o falhou, usando fallback...');
      }

      // ESTRAT√âGIA 4: Fallback inteligente
      console.log('üîÑ Usando fallback inteligente...');
      return this.createIntelligentFallback(originalResponse, fieldType);

    } catch (error) {
      console.error('Erro na corre√ß√£o com IA:', error);
      return this.createBasicFallback(originalResponse, fieldType);
    }
  }

  // Extrai objeto parcial da resposta malformada
  extractPartialObject(response) {
    try {
      // Tenta extrair JSON v√°lido da resposta
      const jsonMatch = response.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const partialJson = jsonMatch[0];
        
        // Tenta corrigir problemas b√°sicos
        let cleaned = partialJson
          .replace(/[""]/g, '"')
          .replace(/['']/g, "'")
          .replace(/,\s*}/g, '}')
          .replace(/,\s*]/g, ']')
          .replace(/,\s*,/g, ',');
        
        // Adiciona fechamentos faltantes
        const openBraces = (cleaned.match(/\{/g) || []).length;
        const closeBraces = (cleaned.match(/\}/g) || []).length;
        if (openBraces > closeBraces) {
          cleaned += '}'.repeat(openBraces - closeBraces);
        }
        
        const parsed = JSON.parse(cleaned);
        return parsed;
      }
    } catch (error) {
      console.log('N√£o foi poss√≠vel extrair objeto parcial');
    }
    
    return null;
  }

  // Cria fallback inteligente baseado no contexto
  createIntelligentFallback(response, fieldType) {
    const fallbacks = {
      magicSystem: {
        name: this.extractName(response) || 'Sistema M√°gico Misterioso',
        description: this.extractDescription(response) || 'Um sistema de magia √∫nico e poderoso',
        rules: 'Regras e mec√¢nicas do sistema m√°gico',
        source: 'Fonte de poder m√°gico',
        limitations: 'Limita√ß√µes e custos do sistema'
      },
      government: {
        name: this.extractName(response) || 'Sistema Pol√≠tico',
        type: this.extractType(response) || 'Democracia',
        description: this.extractDescription(response) || 'Sistema de governo bem estruturado',
        leaderTitle: 'L√≠der do governo',
        laws: 'Leis e regulamenta√ß√µes principais'
      },
      language: {
        name: this.extractName(response) || 'L√≠ngua Local',
        family: 'Fam√≠lia lingu√≠stica',
        speakers: 'Falantes nativos',
        script: 'Sistema de escrita',
        examples: { hello: 'Ol√°', goodbye: 'Adeus', water: '√Ågua' }
      }
    };

    const fallback = fallbacks[fieldType] || fallbacks.magicSystem;
    return this.addMetadata({
      ...fallback,
      error: 'Resposta processada com corre√ß√£o inteligente',
      originalResponse: response.substring(0, 200) + '...'
    });
  }

  // Cria fallback b√°sico
  createBasicFallback(response, fieldType) {
    return this.addMetadata({
      name: 'Item Gerado',
      description: 'Item gerado automaticamente',
      error: 'Falha no processamento da resposta da IA',
      fieldType: fieldType,
      originalResponse: response.substring(0, 100) + '...',
      generatedBy: 'AI',
      createdAt: new Date().toISOString()
    });
  }

  // Extrai nome da resposta
  extractName(response) {
    const nameMatch = response.match(/"name"\s*:\s*"([^"]*)"/);
    return nameMatch ? nameMatch[1] : null;
  }

  // Extrai descri√ß√£o da resposta
  extractDescription(response) {
    const descMatch = response.match(/"description"\s*:\s*"([^"]*)"/);
    return descMatch ? descMatch[1] : null;
  }

  // Extrai tipo da resposta
  extractType(response) {
    const typeMatch = response.match(/"type"\s*:\s*"([^"]*)"/);
    return typeMatch ? typeMatch[1] : null;
  }

  // Adiciona metadados ao objeto
  addMetadata(obj) {
    return {
      ...obj,
      generatedBy: 'AI',
      createdAt: new Date().toISOString(),
      correctedBy: 'AICorrectionAgent'
    };
  }

  // Retorna estrutura esperada para cada tipo
  getExpectedStructure(fieldType) {
    const structures = {
      magicSystem: {
        name: "Nome do sistema m√°gico",
        description: "Descri√ß√£o detalhada",
        rules: "Regras e mec√¢nicas",
        source: "Fonte de poder",
        limitations: "Limita√ß√µes e custos"
      },
      government: {
        name: "Nome do governo",
        type: "Tipo de governo",
        description: "Descri√ß√£o do sistema",
        leaderTitle: "T√≠tulo do l√≠der",
        laws: "Leis principais"
      },
      language: {
        name: "Nome da l√≠ngua",
        family: "Fam√≠lia lingu√≠stica",
        speakers: "Falantes",
        script: "Sistema de escrita",
        examples: "Exemplos de palavras"
      }
    };

    return structures[fieldType] || structures.magicSystem;
  }
}

// Inst√¢ncia global do agente (ser√° inicializada quando necess√°rio)
let aiCorrectionAgent = null;

// Fun√ß√£o principal de limpeza adaptativa usando IA
export async function cleanAIResponse(response, fieldType = 'magicSystem', aiService = null) {
  if (!response) return null;
  
  // Se j√° √© um objeto, apenas adiciona metadados
  if (typeof response === 'object' && response !== null) {
    if (!response.generatedBy) {
      response.generatedBy = 'AI';
      response.createdAt = new Date().toISOString();
    }
    return response;
  }
  
  // Se n√£o temos aiService, usa fallback s√≠ncrono
  if (!aiService) {
    console.log('‚ö†Ô∏è Sem aiService, usando fallback s√≠ncrono...');
    return cleanAIResponseSync(response, fieldType);
  }
  
  console.log('üß† Usando IA para corrigir resposta malformada...');
  
  try {
    // Inicializa o agente se necess√°rio
    if (!aiCorrectionAgent) {
      aiCorrectionAgent = new AICorrectionAgent(aiService);
    }
    
    // Usa o agente de IA para corrigir
    const corrected = await aiCorrectionAgent.correctWithAI(response, fieldType);
    console.log('‚úÖ Resposta corrigida com sucesso pela IA');
    return corrected;
  } catch (error) {
    console.error('‚ùå Erro na corre√ß√£o com IA:', error);
    
    // Fallback para m√©todo anterior se a IA falhar
    return {
      name: 'Item Gerado',
      description: 'Item gerado automaticamente',
      error: 'Falha na corre√ß√£o com IA',
      fieldType: fieldType,
      generatedBy: 'AI',
      createdAt: new Date().toISOString()
    };
  }
}

// Fun√ß√£o s√≠ncrona para compatibilidade (usa fallback)
export function cleanAIResponseSync(response, fieldType = 'magicSystem') {
  if (!response) return null;
  
  if (typeof response === 'object' && response !== null) {
    if (!response.generatedBy) {
      response.generatedBy = 'AI';
      response.createdAt = new Date().toISOString();
    }
    return response;
  }
  
  // Fallback s√≠ncrono simples
  const fallback = aiCorrectionAgent.createIntelligentFallback(response, fieldType);
  return fallback;
}

export default cleanAIResponse;